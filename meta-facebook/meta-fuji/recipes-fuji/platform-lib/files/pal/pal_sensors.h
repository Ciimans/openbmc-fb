/*
 *
 * Copyright 2020-present Facebook. All Rights Reserved.
 *
 *
 * This program is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 675 Mass Ave, Cambridge, MA 02139, USA.
 */

#ifndef __PAL_SENSORS_H__
#define __PAL_SENSORS_H__
#include <openbmc/obmc-pal.h>
#include <openbmc/kv.h>
#include <openbmc/obmc_pal_sensors.h>

#ifdef __cplusplus
extern "C" {
#endif

#include <openbmc/ipmi.h>
#include <stdbool.h>
#include <math.h>
#include <facebook/bic.h>

#define I2C_DEV_HWMON_DIR(dev) I2C_SYSFS_DEV_ENTRY(dev, hwmon/hwmon*)
#define SMB_TMP422_DEVICE      I2C_DEV_HWMON_DIR(3-004c)
#define SIM_LM75_U1_DEVICE     I2C_DEV_HWMON_DIR(50-004c)
#define SMB_ISL_DEVICE         I2C_SYSFS_DEV_DIR(1-0060)
#define SMB_UCD9012_1_DEVICE   I2C_DEV_HWMON_DIR(5-0035)
#define SMB_UCD9012_2_DEVICE   I2C_DEV_HWMON_DIR(5-0036)
#define SMB_TEMP1_DEVICE       I2C_DEV_HWMON_DIR(3-0048)
#define SMB_TEMP2_DEVICE       I2C_DEV_HWMON_DIR(3-0049)
#define SMB_TEMP3_DEVICE       I2C_DEV_HWMON_DIR(3-004a)
#define SMB_TEMP4_DEVICE       I2C_DEV_HWMON_DIR(3-004b)
#define SMB_IOB_DEVICE         I2C_SYSFS_DEV_DIR(13-0035)
#define SCM_HSC_DEVICE         I2C_DEV_HWMON_DIR(16-0010)
#define SCM_OUTLET_TEMP_DEVICE I2C_DEV_HWMON_DIR(17-004c)
#define SCM_SENSOR_BMC_LM75_U9_DEVICE  I2C_DEV_HWMON_DIR(8-004a)
#define SCM_INLET_TEMP_DEVICE  I2C_DEV_HWMON_DIR(17-004d)
#define SMB_VDDC_SW_DEVICE     I2C_DEV_HWMON_DIR(1-0040)
#define PSU1_DEVICE            I2C_SYSFS_DEV_DIR(48-0058)
#define PSU2_DEVICE            I2C_SYSFS_DEV_DIR(49-005a)
#define PSU3_DEVICE            I2C_SYSFS_DEV_DIR(56-0058)
#define PSU4_DEVICE            I2C_SYSFS_DEV_DIR(57-005a)
#define SMB_PDB_L_TEMP1_DEVICE I2C_DEV_HWMON_DIR(51-0048)
#define SMB_PDB_L_TEMP2_DEVICE I2C_DEV_HWMON_DIR(52-0049)
#define SMB_PDB_R_TEMP1_DEVICE I2C_DEV_HWMON_DIR(59-0048)
#define SMB_PDB_R_TEMP2_DEVICE I2C_DEV_HWMON_DIR(60-0049)
#define SMB_FCM_T_TACH_DEVICE  I2C_SYSFS_DEV_DIR(64-0033)
#define SMB_FCM_T_TEMP1_DEVICE I2C_DEV_HWMON_DIR(66-0048)
#define SMB_FCM_T_TEMP2_DEVICE I2C_DEV_HWMON_DIR(66-0049)
#define SMB_FCM_T_HSC_DEVICE   I2C_DEV_HWMON_DIR(67-0010)
#define SMB_FCM_B_TACH_DEVICE  I2C_SYSFS_DEV_DIR(72-0033)
#define SMB_FCM_B_TEMP1_DEVICE I2C_DEV_HWMON_DIR(74-0048)
#define SMB_FCM_B_TEMP2_DEVICE I2C_DEV_HWMON_DIR(74-0049)
#define SMB_FCM_B_HSC_DEVICE   I2C_DEV_HWMON_DIR(75-0010)
#define PIM1_DOM_DEVICE        I2C_SYSFS_DEV_DIR(80-0060)
#define PIM1_TEMP1_DEVICE      I2C_DEV_HWMON_DIR(84-004a)
#define PIM1_LM75_U26_DEVICE   I2C_DEV_HWMON_DIR(83-004b)
#define PIM1_TEMP2_DEVICE      I2C_DEV_HWMON_DIR(82-0048)
#define PIM1_HSC_DEVICE        I2C_DEV_HWMON_DIR(84-0010)
#define PIM1_UCD90160_DEVICE   I2C_DEV_HWMON_DIR(86-0034)
#define PIM2_DOM_DEVICE        I2C_SYSFS_DEV_DIR(88-0060)
#define PIM2_TEMP1_DEVICE      I2C_DEV_HWMON_DIR(92-004a)
#define PIM2_LM75_U26_DEVICE   I2C_DEV_HWMON_DIR(91-004b)
#define PIM2_TEMP2_DEVICE      I2C_DEV_HWMON_DIR(90-0048)
#define PIM2_HSC_DEVICE        I2C_DEV_HWMON_DIR(92-0010)
#define PIM2_UCD90160_DEVICE   I2C_DEV_HWMON_DIR(94-0034)
#define PIM3_DOM_DEVICE        I2C_SYSFS_DEV_DIR(96-0060)
#define PIM3_TEMP1_DEVICE      I2C_DEV_HWMON_DIR(100-004a)
#define PIM3_LM75_U26_DEVICE   I2C_DEV_HWMON_DIR(99-004b)
#define PIM3_TEMP2_DEVICE      I2C_DEV_HWMON_DIR(98-0048)
#define PIM3_HSC_DEVICE        I2C_DEV_HWMON_DIR(100-0010)
#define PIM3_UCD90160_DEVICE   I2C_DEV_HWMON_DIR(102-0034)
#define PIM4_DOM_DEVICE        I2C_SYSFS_DEV_DIR(104-0060)
#define PIM4_TEMP1_DEVICE      I2C_DEV_HWMON_DIR(108-004a)
#define PIM4_LM75_U26_DEVICE   I2C_DEV_HWMON_DIR(107-004b)
#define PIM4_TEMP2_DEVICE      I2C_DEV_HWMON_DIR(106-0048)
#define PIM4_HSC_DEVICE        I2C_DEV_HWMON_DIR(108-0010)
#define PIM4_UCD90160_DEVICE   I2C_DEV_HWMON_DIR(110-0034)
#define PIM5_DOM_DEVICE        I2C_SYSFS_DEV_DIR(112-0060)
#define PIM5_TEMP1_DEVICE      I2C_DEV_HWMON_DIR(116-004a)
#define PIM5_LM75_U26_DEVICE   I2C_DEV_HWMON_DIR(115-004b)
#define PIM5_TEMP2_DEVICE      I2C_DEV_HWMON_DIR(114-0048)
#define PIM5_HSC_DEVICE        I2C_DEV_HWMON_DIR(116-0010)
#define PIM5_UCD90160_DEVICE   I2C_DEV_HWMON_DIR(118-0034)
#define PIM6_DOM_DEVICE        I2C_SYSFS_DEV_DIR(120-0060)
#define PIM6_TEMP1_DEVICE      I2C_DEV_HWMON_DIR(124-004a)
#define PIM6_LM75_U26_DEVICE   I2C_DEV_HWMON_DIR(123-004b)
#define PIM6_TEMP2_DEVICE      I2C_DEV_HWMON_DIR(122-0048)
#define PIM6_HSC_DEVICE        I2C_DEV_HWMON_DIR(124-0010)
#define PIM6_UCD90160_DEVICE   I2C_DEV_HWMON_DIR(126-0034)
#define PIM7_DOM_DEVICE        I2C_SYSFS_DEV_DIR(128-0060)
#define PIM7_TEMP1_DEVICE      I2C_DEV_HWMON_DIR(132-004a)
#define PIM7_LM75_U26_DEVICE   I2C_DEV_HWMON_DIR(131-004b)
#define PIM7_TEMP2_DEVICE      I2C_DEV_HWMON_DIR(130-0048)
#define PIM7_HSC_DEVICE        I2C_DEV_HWMON_DIR(132-0010)
#define PIM7_UCD90160_DEVICE   I2C_DEV_HWMON_DIR(134-0034)
#define PIM8_DOM_DEVICE        I2C_SYSFS_DEV_DIR(136-0060)
#define PIM8_TEMP1_DEVICE      I2C_DEV_HWMON_DIR(140-004a)
#define PIM8_LM75_U26_DEVICE   I2C_DEV_HWMON_DIR(139-004b)
#define PIM8_TEMP2_DEVICE      I2C_DEV_HWMON_DIR(138-0048)
#define PIM8_HSC_DEVICE        I2C_DEV_HWMON_DIR(140-0010)
#define PIM8_UCD90160_DEVICE   I2C_DEV_HWMON_DIR(142-0034)

#define TEMP(x)  "temp"#x"_input"
#define VOLT(x)  "in"#x"_input"
#define VOLT_SET(x)  "vo"#x"_input"
#define CURR(x)  "curr"#x"_input"
#define POWER(x) "power"#x"_input"

#define UNIT_DIV 1000

#define READING_NA -2

#define SCM_RSENSE 1.16
#define PIM_RSENSE 1.06
#define PIM16O_RSENSE 1.11
#define MAX_SENSOR_NUM  0xFF
#define MAX_SENSOR_THRESHOLD  8

/* Sensors on SCM */
enum {
  SCM_SENSOR_OUTLET_U7_TEMP = 0x02,
  SCM_SENSOR_INLET_U8_TEMP = 0x04,
  SCM_SENSOR_HSC_VOLT = 0x0a,
  SCM_SENSOR_POWER_VOLT = 0x0b,
  SCM_SENSOR_HSC_CURR = 0x0c,
  SCM_SENSOR_HSC_POWER = 0x0d,
  SCM_SENSOR_BMC_LM75_U9_TEMP = 0x0e,
};

enum {
    /* Sensors on COM-e */
  BIC_SENSOR_MB_OUTLET_TEMP = 0x01,
  BIC_SENSOR_MB_INLET_TEMP = 0x07,
  BIC_SENSOR_PCH_TEMP = 0x08,
  BIC_SENSOR_VCCIN_VR_TEMP = 0x80,
  BIC_SENSOR_1V05MIX_VR_TEMP = 0x81,
  BIC_SENSOR_SOC_TEMP = 0x05,
  BIC_SENSOR_SOC_THERM_MARGIN = 0x09,
  BIC_SENSOR_VDDR_VR_TEMP = 0x82,
  BIC_SENSOR_SOC_DIMMA0_TEMP = 0xB4,
  BIC_SENSOR_SOC_DIMMB0_TEMP = 0xB6,
  BIC_SENSOR_SOC_PACKAGE_PWR = 0x2C,
  BIC_SENSOR_VCCIN_VR_POUT = 0x8B,
  BIC_SENSOR_VDDR_VR_POUT = 0x8D,
  BIC_SENSOR_SOC_TJMAX = 0x30,
  BIC_SENSOR_P3V3_MB = 0xD0,
  BIC_SENSOR_P12V_MB = 0xD2,
  BIC_SENSOR_P1V05_PCH = 0xD3,
  BIC_SENSOR_P3V3_STBY_MB = 0xD5,
  BIC_SENSOR_P5V_STBY_MB = 0xD6,
  BIC_SENSOR_PV_BAT = 0xD7,
  BIC_SENSOR_PVDDR = 0xD8,
  BIC_SENSOR_P1V05_MIX = 0x8E,
  BIC_SENSOR_1V05MIX_VR_CURR = 0x84,
  BIC_SENSOR_VDDR_VR_CURR = 0x85,
  BIC_SENSOR_VCCIN_VR_CURR = 0x83,
  BIC_SENSOR_VCCIN_VR_VOL = 0x88,
  BIC_SENSOR_VDDR_VR_VOL = 0x8A,
  BIC_SENSOR_P1V05MIX_VR_VOL = 0x89,
  BIC_SENSOR_P1V05MIX_VR_POUT = 0x8C,
  BIC_SENSOR_INA230_POWER = 0x29,
  BIC_SENSOR_INA230_VOL = 0x2A,
  BIC_SENSOR_SYSTEM_STATUS = 0x10, //Discrete
  BIC_SENSOR_PROC_FAIL = 0x65, //Discrete
  BIC_SENSOR_SYS_BOOT_STAT = 0x7E, //Discrete
  BIC_SENSOR_VR_HOT = 0xB2, //Discrete
  BIC_SENSOR_CPU_DIMM_HOT = 0xB3, //Discrete
  BIC_SENSOR_SPS_FW_HLTH = 0x17, //Event-only
  BIC_SENSOR_POST_ERR = 0x2B, //Event-only
  BIC_SENSOR_POWER_THRESH_EVENT = 0x3B, //Event-only
  BIC_SENSOR_MACHINE_CHK_ERR = 0x40, //Event-only
  BIC_SENSOR_PCIE_ERR = 0x41, //Event-only
  BIC_SENSOR_OTHER_IIO_ERR = 0x43, //Event-only
  BIC_SENSOR_PROC_HOT_EXT = 0x51, //Event-only
  BIC_SENSOR_POWER_ERR = 0x56, //Event-only
  BIC_SENSOR_MEM_ECC_ERR = 0x63, //Event-only
  BIC_SENSOR_CAT_ERR = 0xEB, //Event-only
};

/* Sensors on SMB */
enum {
  SMB_XP3R3V_BMC = 0x01,
  SMB_XP2R5V_BMC = 0x02,
  SMB_XP1R8V_BMC = 0x03,
  SMB_XP1R2V_BMC = 0x04,
  SMB_XP1R0V_FPGA = 0x05,
  SMB_XP3R3V_USB = 0x06,
  SMB_XP5R0V = 0x07,
  SMB_XP3R3V_EARLY = 0x08,
  SMB_LM57_VTEMP = 0x09,
  SMB_XP1R8 = 0x0a,
  SMB_XP1R2 = 0x0b,
  SMB_VDDC_SW = 0x0c,
  SMB_XP3R3V = 0x0d,
  SMB_XP1R8V_AVDD = 0x0e,
  SMB_XP1R2V_TVDD = 0x0f,
  SMB_XP0R75V_1_PVDD = 0x10,
  SMB_XP0R75V_2_PVDD = 0x11,
  SMB_XP0R75V_3_PVDD = 0x12,
  SMB_VDD_PCIE = 0x13,
  SMB_XP0R84V_DCSU = 0x14,
  SMB_XP0R84V_CSU = 0x15,
  SMB_XP1R84V_CSU = 0x16,
  SMB_XP3R3V_TCXO = 0x17,
  SMB_TMP422_U20_1_TEMP = 0x18,
  SMB_TMP422_U20_2_TEMP = 0x19,
  SMB_TMP422_U20_3_TEMP = 0x1a,
  SIM_LM75_U1_TEMP = 0x1b,
  SMB_SENSOR_TEMP1 = 0x1c,
  SMB_SENSOR_TEMP2 = 0x1d,
  SMB_SENSOR_TEMP3 = 0x1e,
  SMB_VDDC_SW_TEMP = 0x1f,
  SMB_XP12R0V_VDDC_SW_IN = 0x20,
  SMB_VDDC_SW_POWER_IN = 0x21,
  SMB_VDDC_SW_POWER_OUT = 0x22,
  SMB_VDDC_SW_CURR_IN = 0x23,
  SMB_VDDC_SW_CURR_OUT = 0x24,
  /* Sensors on PDB */
  SMB_SENSOR_PDB_L_TEMP1 = 0x25,
  SMB_SENSOR_PDB_L_TEMP2 = 0x26,
  SMB_SENSOR_PDB_R_TEMP1 = 0x27,
  SMB_SENSOR_PDB_R_TEMP2 = 0x28,
  /* Sensors on FCM */
  SMB_SENSOR_FCM_T_TEMP1 = 0x29,
  SMB_SENSOR_FCM_T_TEMP2 = 0x2a,
  SMB_SENSOR_FCM_B_TEMP1 = 0x2b,
  SMB_SENSOR_FCM_B_TEMP2 = 0x2c,
  SMB_SENSOR_FCM_T_HSC_VOLT = 0x2d,
  SMB_SENSOR_FCM_T_HSC_CURR = 0x2e,
  SMB_SENSOR_FCM_T_HSC_POWER_VOLT = 0x2f,
  SMB_SENSOR_FCM_B_HSC_VOLT = 0x30,
  SMB_SENSOR_FCM_B_HSC_CURR = 0x31,
  SMB_SENSOR_FCM_B_HSC_POWER_VOLT = 0x32,
  /* Sensors FAN Speed */
  SMB_SENSOR_FAN1_FRONT_TACH = 0x33,
  SMB_SENSOR_FAN1_REAR_TACH = 0x34,
  SMB_SENSOR_FAN2_FRONT_TACH = 0x35,
  SMB_SENSOR_FAN2_REAR_TACH = 0x36,
  SMB_SENSOR_FAN3_FRONT_TACH = 0x37,
  SMB_SENSOR_FAN3_REAR_TACH = 0x38,
  SMB_SENSOR_FAN4_FRONT_TACH = 0x39,
  SMB_SENSOR_FAN4_REAR_TACH = 0x3a,
  SMB_SENSOR_FAN5_FRONT_TACH = 0x3b,
  SMB_SENSOR_FAN5_REAR_TACH = 0x3c,
  SMB_SENSOR_FAN6_FRONT_TACH = 0x3d,
  SMB_SENSOR_FAN6_REAR_TACH = 0x3e,
  SMB_SENSOR_FAN7_FRONT_TACH = 0x3f,
  SMB_SENSOR_FAN7_REAR_TACH = 0x40,
  SMB_SENSOR_FAN8_FRONT_TACH = 0x41,
  SMB_SENSOR_FAN8_REAR_TACH = 0x42,
};

/* Sensors on PIM */
enum {
  /* Sensors on PIM1 */
  PIM1_LM75_U37_TEMP_BASE = 0x01,
  PIM1_LM75_U26_TEMP = 0x02,
  PIM1_LM75_U37_TEMP_MEZZ = 0x03,
  PIM1_SENSOR_HSC_VOLT = 0x04,
  PIM1_POWER_VOLTAGE = 0x05,
  PIM1_SENSOR_HSC_CURR = 0x06,
  PIM1_SENSOR_HSC_POWER = 0x07,
  PIM1_XP3R3V = 0x08,
  PIM1_XP3R3V_EARLY = 0x09,
  PIM1_XP2R5V_EARLY = 0x0a,
  PIM1_TXDRV_PHY = 0x0b,
  PIM1_XP0R8V_PHY = 0x0c,
  PIM1_XP1R1V_EARLY = 0x0d,
  PIM1_DVDD_PHY4 = 0x0e,
  PIM1_DVDD_PHY3 = 0x0f,
  PIM1_DVDD_PHY2 = 0x10,
  PIM1_DVDD_PHY1 = 0x11,
  PIM1_XP1R8V_EARLY = 0x12,
  PIM1_XP1R8V_PHYIO = 0x13,
  PIM1_XP1R8V_PHYAVDD = 0x14,
  /* Sensors on PIM2 */
  PIM2_LM75_U37_TEMP_BASE = 0x15,
  PIM2_LM75_U26_TEMP = 0x16,
  PIM2_LM75_U37_TEMP_MEZZ = 0x17,
  PIM2_SENSOR_HSC_VOLT = 0x18,
  PIM2_POWER_VOLTAGE = 0x19,
  PIM2_SENSOR_HSC_CURR = 0x1a,
  PIM2_SENSOR_HSC_POWER = 0x1b,
  PIM2_XP3R3V = 0x1c,
  PIM2_XP3R3V_EARLY = 0x1d,
  PIM2_XP2R5V_EARLY = 0x1e,
  PIM2_TXDRV_PHY = 0x1f,
  PIM2_XP0R8V_PHY = 0x20,
  PIM2_XP1R1V_EARLY = 0x21,
  PIM2_DVDD_PHY4 = 0x22,
  PIM2_DVDD_PHY3 = 0x23,
  PIM2_DVDD_PHY2 = 0x24,
  PIM2_DVDD_PHY1 = 0x25,
  PIM2_XP1R8V_EARLY = 0x26,
  PIM2_XP1R8V_PHYIO = 0x27,
  PIM2_XP1R8V_PHYAVDD = 0x28,
  /* Sensors on PIM3 */
  PIM3_LM75_U37_TEMP_BASE = 0x29,
  PIM3_LM75_U26_TEMP = 0x2a,
  PIM3_LM75_U37_TEMP_MEZZ = 0x2b,
  PIM3_SENSOR_HSC_VOLT = 0x2c,
  PIM3_POWER_VOLTAGE = 0x2d,
  PIM3_SENSOR_HSC_CURR = 0x2e,
  PIM3_SENSOR_HSC_POWER = 0x2f,
  PIM3_XP3R3V = 0x30,
  PIM3_XP3R3V_EARLY = 0x31,
  PIM3_XP2R5V_EARLY = 0x32,
  PIM3_TXDRV_PHY = 0x33,
  PIM3_XP0R8V_PHY = 0x34,
  PIM3_XP1R1V_EARLY = 0x35,
  PIM3_DVDD_PHY4 = 0x36,
  PIM3_DVDD_PHY3 = 0x37,
  PIM3_DVDD_PHY2 = 0x38,
  PIM3_DVDD_PHY1 = 0x39,
  PIM3_XP1R8V_EARLY = 0x3a,
  PIM3_XP1R8V_PHYIO = 0x3b,
  PIM3_XP1R8V_PHYAVDD = 0x3c,
  /* Sensors on PIM4 */
  PIM4_LM75_U37_TEMP_BASE = 0x3d,
  PIM4_LM75_U26_TEMP = 0x3e,
  PIM4_LM75_U37_TEMP_MEZZ = 0x3f,
  PIM4_SENSOR_HSC_VOLT = 0x40,
  PIM4_POWER_VOLTAGE = 0x41,
  PIM4_SENSOR_HSC_CURR = 0x42,
  PIM4_SENSOR_HSC_POWER = 0x43,
  PIM4_XP3R3V = 0x44,
  PIM4_XP3R3V_EARLY = 0x45,
  PIM4_XP2R5V_EARLY = 0x46,
  PIM4_TXDRV_PHY = 0x47,
  PIM4_XP0R8V_PHY = 0x48,
  PIM4_XP1R1V_EARLY = 0x49,
  PIM4_DVDD_PHY4 = 0x4a,
  PIM4_DVDD_PHY3 = 0x4b,
  PIM4_DVDD_PHY2 = 0x4c,
  PIM4_DVDD_PHY1 = 0x4d,
  PIM4_XP1R8V_EARLY = 0x4e,
  PIM4_XP1R8V_PHYIO = 0x4f,
  PIM4_XP1R8V_PHYAVDD = 0x50,
  /* Sensors on PIM5 */
  PIM5_LM75_U37_TEMP_BASE = 0x51,
  PIM5_LM75_U26_TEMP = 0x52,
  PIM5_LM75_U37_TEMP_MEZZ = 0x53,
  PIM5_SENSOR_HSC_VOLT = 0x54,
  PIM5_POWER_VOLTAGE = 0x55,
  PIM5_SENSOR_HSC_CURR = 0x56,
  PIM5_SENSOR_HSC_POWER = 0x57,
  PIM5_XP3R3V = 0x58,
  PIM5_XP3R3V_EARLY = 0x59,
  PIM5_XP2R5V_EARLY = 0x5a,
  PIM5_TXDRV_PHY = 0x5b,
  PIM5_XP0R8V_PHY = 0x5c,
  PIM5_XP1R1V_EARLY = 0x5d,
  PIM5_DVDD_PHY4 = 0x5e,
  PIM5_DVDD_PHY3 = 0x5f,
  PIM5_DVDD_PHY2 = 0x60,
  PIM5_DVDD_PHY1 = 0x61,
  PIM5_XP1R8V_EARLY = 0x62,
  PIM5_XP1R8V_PHYIO = 0x63,
  PIM5_XP1R8V_PHYAVDD = 0x64,
  /* Sensors on PIM6 */
  PIM6_LM75_U37_TEMP_BASE = 0x65,
  PIM6_LM75_U26_TEMP = 0x66,
  PIM6_LM75_U37_TEMP_MEZZ = 0x67,
  PIM6_SENSOR_HSC_VOLT = 0x68,
  PIM6_POWER_VOLTAGE = 0x69,
  PIM6_SENSOR_HSC_CURR = 0x6a,
  PIM6_SENSOR_HSC_POWER = 0x6b,
  PIM6_XP3R3V = 0x6c,
  PIM6_XP3R3V_EARLY = 0x6d,
  PIM6_XP2R5V_EARLY = 0x6e,
  PIM6_TXDRV_PHY = 0x6f,
  PIM6_XP0R8V_PHY = 0x70,
  PIM6_XP1R1V_EARLY = 0x71,
  PIM6_DVDD_PHY4 = 0x72,
  PIM6_DVDD_PHY3 = 0x73,
  PIM6_DVDD_PHY2 = 0x74,
  PIM6_DVDD_PHY1 = 0x75,
  PIM6_XP1R8V_EARLY = 0x76,
  PIM6_XP1R8V_PHYIO = 0x77,
  PIM6_XP1R8V_PHYAVDD = 0x78,
  /* Sensors on PIM7 */
  PIM7_LM75_U37_TEMP_BASE = 0x79,
  PIM7_LM75_U26_TEMP = 0x7a,
  PIM7_LM75_U37_TEMP_MEZZ = 0x7b,
  PIM7_SENSOR_HSC_VOLT = 0x7c,
  PIM7_POWER_VOLTAGE = 0x7d,
  PIM7_SENSOR_HSC_CURR = 0x7e,
  PIM7_SENSOR_HSC_POWER = 0x7f,
  PIM7_XP3R3V = 0x80,
  PIM7_XP3R3V_EARLY = 0x81,
  PIM7_XP2R5V_EARLY = 0x82,
  PIM7_TXDRV_PHY = 0x83,
  PIM7_XP0R8V_PHY = 0x84,
  PIM7_XP1R1V_EARLY = 0x85,
  PIM7_DVDD_PHY4 = 0x86,
  PIM7_DVDD_PHY3 = 0x87,
  PIM7_DVDD_PHY2 = 0x88,
  PIM7_DVDD_PHY1 = 0x89,
  PIM7_XP1R8V_EARLY = 0x8a,
  PIM7_XP1R8V_PHYIO = 0x8b,
  PIM7_XP1R8V_PHYAVDD = 0x8c,
  /* Sensors on PIM8 */
  PIM8_LM75_U37_TEMP_BASE = 0x8d,
  PIM8_LM75_U26_TEMP = 0x8e,
  PIM8_LM75_U37_TEMP_MEZZ = 0x8f,
  PIM8_SENSOR_HSC_VOLT = 0x90,
  PIM8_POWER_VOLTAGE = 0x91,
  PIM8_SENSOR_HSC_CURR = 0x92,
  PIM8_SENSOR_HSC_POWER = 0x93,
  PIM8_XP3R3V = 0x94,
  PIM8_XP3R3V_EARLY = 0x95,
  PIM8_XP2R5V_EARLY = 0x96,
  PIM8_TXDRV_PHY = 0x97,
  PIM8_XP0R8V_PHY = 0x98,
  PIM8_XP1R1V_EARLY = 0x99,
  PIM8_DVDD_PHY4 = 0x9a,
  PIM8_DVDD_PHY3 = 0x9b,
  PIM8_DVDD_PHY2 = 0x9c,
  PIM8_DVDD_PHY1 = 0x9d,
  PIM8_XP1R8V_EARLY = 0x9e,
  PIM8_XP1R8V_PHYIO = 0x9f,
  PIM8_XP1R8V_PHYAVDD = 0xa0,
  PIM1_SENSOR_QSFP_TEMP = 0xa9,
  PIM2_SENSOR_QSFP_TEMP = 0xaa,
  PIM3_SENSOR_QSFP_TEMP = 0xab,
  PIM4_SENSOR_QSFP_TEMP = 0xac,
  PIM5_SENSOR_QSFP_TEMP = 0xad,
  PIM6_SENSOR_QSFP_TEMP = 0xae,
  PIM7_SENSOR_QSFP_TEMP = 0xaf,
  PIM8_SENSOR_QSFP_TEMP = 0xb0,
};

/* Sensors on PSU */
enum {
  PSU1_SENSOR_IN_VOLT = 0x01,
  PSU1_SENSOR_12V_VOLT = 0x02,
  PSU1_SENSOR_STBY_VOLT = 0x03,
  PSU1_SENSOR_IN_CURR = 0x04,
  PSU1_SENSOR_12V_CURR = 0x05,
  PSU1_SENSOR_STBY_CURR = 0x06,
  PSU1_SENSOR_IN_POWER = 0x07,
  PSU1_SENSOR_12V_POWER = 0x08,
  PSU1_SENSOR_STBY_POWER = 0x09,
  PSU1_SENSOR_FAN_TACH = 0x0a,
  PSU1_SENSOR_TEMP1 = 0x0b,
  PSU1_SENSOR_TEMP2 = 0x0c,
  PSU1_SENSOR_TEMP3 = 0x0d,
  PSU2_SENSOR_IN_VOLT = 0x0e,
  PSU2_SENSOR_12V_VOLT = 0x0f,
  PSU2_SENSOR_STBY_VOLT = 0x10,
  PSU2_SENSOR_IN_CURR = 0x11,
  PSU2_SENSOR_12V_CURR = 0x12,
  PSU2_SENSOR_STBY_CURR = 0x13,
  PSU2_SENSOR_IN_POWER = 0x14,
  PSU2_SENSOR_12V_POWER = 0x15,
  PSU2_SENSOR_STBY_POWER = 0x16,
  PSU2_SENSOR_FAN_TACH = 0x17,
  PSU2_SENSOR_TEMP1 = 0x18,
  PSU2_SENSOR_TEMP2 = 0x19,
  PSU2_SENSOR_TEMP3 = 0x1a,
  PSU3_SENSOR_IN_VOLT = 0x1b,
  PSU3_SENSOR_12V_VOLT = 0x1c,
  PSU3_SENSOR_STBY_VOLT = 0x1d,
  PSU3_SENSOR_IN_CURR = 0x1e,
  PSU3_SENSOR_12V_CURR = 0x1f,
  PSU3_SENSOR_STBY_CURR = 0x20,
  PSU3_SENSOR_IN_POWER = 0x21,
  PSU3_SENSOR_12V_POWER = 0x22,
  PSU3_SENSOR_STBY_POWER = 0x23,
  PSU3_SENSOR_FAN_TACH = 0x24,
  PSU3_SENSOR_TEMP1 = 0x25,
  PSU3_SENSOR_TEMP2 = 0x26,
  PSU3_SENSOR_TEMP3 = 0x27,
  PSU4_SENSOR_IN_VOLT = 0x28,
  PSU4_SENSOR_12V_VOLT = 0x29,
  PSU4_SENSOR_STBY_VOLT = 0x2a,
  PSU4_SENSOR_IN_CURR = 0x2b,
  PSU4_SENSOR_12V_CURR = 0x2c,
  PSU4_SENSOR_STBY_CURR = 0x2d,
  PSU4_SENSOR_IN_POWER = 0x2e,
  PSU4_SENSOR_12V_POWER = 0x2f,
  PSU4_SENSOR_STBY_POWER = 0x30,
  PSU4_SENSOR_FAN_TACH = 0x31,
  PSU4_SENSOR_TEMP1 = 0x32,
  PSU4_SENSOR_TEMP2 = 0x33,
  PSU4_SENSOR_TEMP3 = 0x34,
};

int pal_get_fru_sensor_list(uint8_t fru, uint8_t **sensor_list, int *cnt);
int pal_get_fru_discrete_list(uint8_t fru, uint8_t **sensor_list, int *cnt);
int pal_sensor_read_raw(uint8_t fru, uint8_t sensor_num, void *value);
int pal_get_sensor_name(uint8_t fru, uint8_t sensor_num, char *name);
int pal_get_sensor_units(uint8_t fru, uint8_t sensor_num, char *units);
int pal_get_sensor_threshold(uint8_t fru, uint8_t sensor_num, uint8_t thresh, void *value);
void pal_sensor_assert_handle(uint8_t fru, uint8_t snr_num, float val, uint8_t thresh);
void pal_sensor_deassert_handle(uint8_t fru, uint8_t snr_num, float val, uint8_t thresh);
int pal_sensor_threshold_flag(uint8_t fru, uint8_t snr_num, uint16_t *flag);
int pal_get_pim_type_from_file(uint8_t fru);
int pal_set_pim_thresh(uint8_t fru);
int pal_clear_thresh_value(uint8_t fru);
int pal_init_sensor_check(uint8_t fru, uint8_t snr_num, void *snr);
int fuji_sensor_name(uint8_t fru, uint8_t sensor_num, char *name);
int bic_read_sensor_wrapper(uint8_t slot_id, uint8_t fru, uint8_t sensor_num, bool discrete,
    void *value);
int bic_sensor_sdr_path(uint8_t fru, char *path);
int bic_get_sdr_thresh_val(uint8_t fru, uint8_t snr_num,
                       uint8_t thresh, void *value);
int bic_sdr_init(uint8_t fru, bool reinit);
#ifdef __cplusplus
} // extern "C"
#endif

#endif /* __PAL_SENSORS_H__ */
